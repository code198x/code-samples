; Pixel Pulse - Lesson 1 Complete
; Full ZX Spectrum game arena with colorful graphics

        ORG $8000       ; Start at 32768

start:
        ; Clear screen to black
        CALL clear_screen
        
        ; Set border color to cyan
        LD A, 5         ; Cyan
        OUT (254), A    ; Set border
        
        ; Create title screen
        CALL draw_title
        CALL wait_key
        
        ; Create game arena
        CALL create_arena
        CALL wait_key
        
        ; Return to BASIC
        RET

clear_screen:
        ; Clear display memory ($4000-$57FF)
        LD HL, $4000    ; Start of screen
        LD DE, $4001    ; Destination
        LD BC, $17FF    ; 6144 bytes
        LD (HL), 0      ; Clear first byte
        LDIR            ; Copy zeros to rest
        
        ; Clear attributes ($5800-$5AFF) 
        LD HL, $5800    ; Start of attributes
        LD DE, $5801    ; Destination  
        LD BC, $2FF     ; 768 bytes
        LD (HL), $07    ; White on black
        LDIR            ; Fill attributes
        
        RET

draw_title:
        ; Position for "PIXEL PULSE" at row 10
        LD HL, $4000    ; Screen base
        LD BC, 10 * 32  ; Row 10 (32 bytes per row)
        ADD HL, BC      ; Point to row 10
        LD BC, 11       ; Center horizontally
        ADD HL, BC
        
        ; Draw each letter with custom bitmaps
        LD DE, letter_p ; P
        CALL draw_letter
        
        LD DE, letter_i ; I
        CALL draw_letter
        
        LD DE, letter_x ; X
        CALL draw_letter
        
        LD DE, letter_e ; E
        CALL draw_letter
        
        LD DE, letter_l ; L
        CALL draw_letter
        
        ; Add space and continue with "PULSE"
        INC HL          ; Skip space
        
        LD DE, letter_p ; P
        CALL draw_letter
        
        LD DE, letter_u ; U
        CALL draw_letter
        
        LD DE, letter_l ; L
        CALL draw_letter
        
        LD DE, letter_s ; S
        CALL draw_letter
        
        LD DE, letter_e ; E
        CALL draw_letter
        
        ; Set rainbow colors for title
        CALL color_title
        
        RET

draw_letter:
        ; Draw an 8x8 character from DE to screen at HL
        PUSH HL         ; Save screen position
        LD B, 8         ; 8 rows
        
draw_row:
        LD A, (DE)      ; Get character row
        LD (HL), A      ; Write to screen
        INC DE          ; Next character row
        
        ; Move to next screen row (complex ZX Spectrum layout)
        PUSH BC         ; Save row counter
        PUSH DE         ; Save character data pointer
        
        ; Calculate next row address
        INC H           ; Next pixel row
        LD A, H
        AND 7           ; Check if crossed character boundary
        JR NZ, same_char_row
        
        ; Crossed character boundary, move to next character row
        LD A, L
        ADD A, 32       ; Next character row
        LD L, A
        JR NC, no_overflow
        INC H           ; Handle overflow
no_overflow:
        LD A, H
        SUB 8           ; Back to start of character
        LD H, A
        
same_char_row:
        POP DE          ; Restore character data
        POP BC          ; Restore row counter
        
        DJNZ draw_row   ; Next row
        
        ; Move HL back up and right for next letter
        POP HL          ; Restore original position
        INC HL          ; Move right one column
        
        RET

color_title:
        ; Set rainbow colors for "PIXEL PULSE"
        LD HL, $5800    ; Attribute base
        LD BC, 10 * 32  ; Row 10
        ADD HL, BC
        LD BC, 11       ; Column 11
        ADD HL, BC
        
        ; Color each character differently
        LD A, $42       ; Red ink, bright
        LD (HL), A
        INC HL
        
        LD A, $46       ; Yellow ink, bright
        LD (HL), A
        INC HL
        
        LD A, $44       ; Green ink, bright
        LD (HL), A
        INC HL
        
        LD A, $45       ; Cyan ink, bright
        LD (HL), A
        INC HL
        
        LD A, $41       ; Blue ink, bright
        LD (HL), A
        INC HL
        
        INC HL          ; Skip space
        
        LD A, $43       ; Magenta ink, bright
        LD (HL), A
        INC HL
        
        LD A, $47       ; White ink, bright
        LD (HL), A
        INC HL
        
        LD A, $42       ; Red ink, bright
        LD (HL), A
        INC HL
        
        LD A, $46       ; Yellow ink, bright
        LD (HL), A
        INC HL
        
        LD A, $44       ; Green ink, bright
        LD (HL), A
        
        RET

create_arena:
        ; Clear screen for arena
        CALL clear_screen
        
        ; Draw arena borders
        CALL draw_arena_walls
        
        ; Add decorative elements
        CALL draw_corners
        
        ; Set arena colors
        CALL color_arena
        
        ; Add some animated elements
        LD B, 100       ; Animation frames
animate_loop:
        PUSH BC
        CALL animate_border
        CALL short_delay
        POP BC
        DJNZ animate_loop
        
        RET

draw_arena_walls:
        ; Draw top wall
        LD B, 2         ; Row 2
        LD C, 4         ; Start column 4
        
top_wall:
        LD A, $FF       ; Solid line
        CALL set_pixel_byte
        INC C
        LD A, C
        CP 28           ; End column
        JR NZ, top_wall
        
        ; Draw bottom wall
        LD B, 21        ; Row 21
        LD C, 4         ; Start column 4
        
bottom_wall:
        LD A, $FF       ; Solid line
        CALL set_pixel_byte
        INC C
        LD A, C
        CP 28
        JR NZ, bottom_wall
        
        ; Draw left wall
        LD B, 3         ; Start row 3
        LD C, 4         ; Column 4
        
left_wall:
        LD A, $FF
        CALL set_pixel_byte
        INC B
        LD A, B
        CP 21           ; End row
        JR NZ, left_wall
        
        ; Draw right wall
        LD B, 3         ; Start row 3
        LD C, 27        ; Column 27
        
right_wall:
        LD A, $FF
        CALL set_pixel_byte
        INC B
        LD A, B
        CP 21
        JR NZ, right_wall
        
        RET

draw_corners:
        ; Add decorative corner elements
        
        ; Top-left corner
        LD B, 2
        LD C, 4
        LD A, %11111000
        CALL set_pixel_byte
        
        ; Top-right corner
        LD B, 2
        LD C, 27
        LD A, %00011111
        CALL set_pixel_byte
        
        ; Bottom-left corner
        LD B, 21
        LD C, 4
        LD A, %11111000
        CALL set_pixel_byte
        
        ; Bottom-right corner
        LD B, 21
        LD C, 27
        LD A, %00011111
        CALL set_pixel_byte
        
        RET

set_pixel_byte:
        ; Set entire byte at character position B,C to value A
        PUSH AF
        PUSH BC
        
        ; Calculate screen address
        LD A, B
        AND $18         ; Character row section
        OR $40          ; Add screen base
        LD H, A
        
        LD A, B
        RLCA
        RLCA
        AND $E0         ; Fine position within section
        LD L, A
        
        LD A, C
        AND $1F         ; Column
        OR L
        LD L, A
        
        ; Set the byte
        POP BC
        POP AF
        LD (HL), A
        
        RET

color_arena:
        ; Set colors for different arena zones
        
        ; Wall colors - white on blue, bright
        LD D, $47       ; White ink, blue paper, bright
        
        ; Color top wall
        LD B, 2
        LD C, 4
top_wall_color:
        CALL set_attribute
        INC C
        LD A, C
        CP 28
        JR NZ, top_wall_color
        
        ; Color bottom wall
        LD B, 21
        LD C, 4
bottom_wall_color:
        CALL set_attribute
        INC C
        LD A, C
        CP 28
        JR NZ, bottom_wall_color
        
        ; Color left wall
        LD B, 3
        LD C, 4
left_wall_color:
        CALL set_attribute
        INC B
        LD A, B
        CP 21
        JR NZ, left_wall_color
        
        ; Color right wall
        LD B, 3
        LD C, 27
right_wall_color:
        CALL set_attribute
        INC B
        LD A, B
        CP 21
        JR NZ, right_wall_color
        
        ; Playing field - green on black
        LD D, $44       ; Green ink, black paper, bright
        LD B, 3         ; Start row
        
color_field_row:
        LD C, 5         ; Start column
        
color_field_col:
        CALL set_attribute
        INC C
        LD A, C
        CP 27           ; End column
        JR NZ, color_field_col
        
        INC B
        LD A, B
        CP 21           ; End row
        JR NZ, color_field_row
        
        ; Corner highlights - flashing yellow
        LD D, $C6       ; Yellow ink, bright, flash
        
        LD B, 2
        LD C, 4
        CALL set_attribute
        
        LD B, 2
        LD C, 27
        CALL set_attribute
        
        LD B, 21
        LD C, 4
        CALL set_attribute
        
        LD B, 21
        LD C, 27
        CALL set_attribute
        
        RET

set_attribute:
        ; Set color at character position B=row, C=column
        ; D = color value
        
        PUSH BC
        PUSH HL
        
        ; Calculate attribute address
        LD A, B         ; Row
        RLCA            ; * 2
        RLCA            ; * 4  
        RLCA            ; * 8
        RLCA            ; * 16
        RLCA            ; * 32
        LD L, A         ; Low byte
        LD A, C         ; Column
        ADD A, L        ; Add column offset
        LD L, A
        LD H, $58       ; Attribute base ($5800)
        
        ; Set the color
        LD (HL), D      ; Write attribute
        
        POP HL
        POP BC
        RET

animate_border:
        ; Cycle border colors for animation effect
        IN A, (254)     ; Read current border (not reliable, use counter)
        INC A
        AND 7           ; Keep in color range
        OUT (254), A    ; Set new border
        RET

short_delay:
        ; Short delay for animation
        LD DE, $0200    ; Small delay value
delay_loop:
        DEC DE
        LD A, D
        OR E
        JR NZ, delay_loop
        RET

wait_key:
        ; Wait for any key press and release
        LD A, $7F       ; Scan all rows
        IN A, (254)     ; Read keyboard
        AND $1F         ; Mask key bits
        CP $1F          ; All keys up?
        JR Z, wait_key  ; Keep waiting
        
        ; Key pressed, wait for release
wait_release:
        LD A, $7F
        IN A, (254)
        AND $1F
        CP $1F
        JR NZ, wait_release
        
        RET

; Character data (8x8 pixels each)
letter_p:
        DB %11111000
        DB %10001000  
        DB %10001000
        DB %11111000
        DB %10000000
        DB %10000000
        DB %10000000
        DB %00000000

letter_i:
        DB %11111000
        DB %00100000
        DB %00100000
        DB %00100000
        DB %00100000
        DB %00100000
        DB %11111000
        DB %00000000

letter_x:
        DB %10001000
        DB %01010000
        DB %00100000
        DB %00100000
        DB %01010000
        DB %10001000
        DB %10001000
        DB %00000000

letter_e:
        DB %11111000
        DB %10000000
        DB %10000000
        DB %11110000
        DB %10000000
        DB %10000000
        DB %11111000
        DB %00000000

letter_l:
        DB %10000000
        DB %10000000
        DB %10000000
        DB %10000000
        DB %10000000
        DB %10000000
        DB %11111000
        DB %00000000

letter_u:
        DB %10001000
        DB %10001000
        DB %10001000
        DB %10001000
        DB %10001000
        DB %10001000
        DB %01110000
        DB %00000000

letter_s:
        DB %01110000
        DB %10000000
        DB %10000000
        DB %01110000
        DB %00001000
        DB %00001000
        DB %01110000
        DB %00000000

        END start